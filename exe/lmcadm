#!/usr/bin/env ruby

require 'lmc'
require "lmcadm"
require 'gli'
require 'table_print'
require 'colorize'

module LMCAdm

  # make gli dsl available
  include GLI::App
  extend self

  program_desc 'LMC command line client'


  version "#{LMCAdm::VERSION} (library version #{::LMC::VERSION})"

  subcommand_option_handling :normal
  arguments :strict

  config_file '.lmcadm.rc'

  commands_from "lmcadm/commands"

  desc 'Be verbose'
  switch [:v, :verbose]

  desc 'debug'
  switch [:debug]

  desc 'Measure time taken for operations'
  switch "take-time"

  desc 'cloud host'
  default_value "cloud.lancom.de"
  flag :C, :cloud_host

  desc 'Use encrypted connection'
  default_value true
  switch "use-tls"

  desc 'Verify server certificate'
  default_value true
  switch "verify-tls"

  desc 'username'
  default_value "admin"
  flag :U, :user

  desc 'password'
  default_value ""
  flag [:P, :password], :mask => true


  pre do |global, command, options, args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    if command.name != :completion && global[:password] == ""
      global[:password] = Helpers::read_pw "Enter password for #{global[:user]}:"
    end
    ::LMC::Cloud.cloud_host = global[:cloud_host]
    ::LMC::Cloud.user = global[:user]
    ::LMC::Cloud.password = global[:password]
    ::LMC::Cloud.verbose = global[:verbose]
    ::LMC::Cloud.debug = global[:debug]
    ::LMC::Cloud.verify_tls = global["verify-tls"]
    ::LMC::Cloud.use_tls = global["use-tls"]
    LMCAdm::ProgressVisualizer.take_time = global["take-time"]
    true
  end

  post do |global, command, options, args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |exception|
    if LMC::Cloud.debug
      puts "on_error handler"
      puts exception
      puts exception.backtrace
    end
    if exception.respond_to?(:response)
      puts "Error response: #{exception.response}"
    end
    true
  end

  exit run(ARGV)
end
